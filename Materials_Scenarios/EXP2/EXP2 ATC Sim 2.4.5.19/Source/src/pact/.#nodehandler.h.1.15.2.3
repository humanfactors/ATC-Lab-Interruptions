/*
 * ATC-Lab: Presentation Module
 * XML document node handler
 *
 * @author:     seth  
 * @version:    $Name:  $
 *              File created 00:00:00 PM 07/12/04
 *
 * $Id: nodehandler.h,v 1.15.2.3 2014/12/02 13:49:00 Aaron Yeung Exp $
 *
 * @copyright:  2004 ARC Key Centre for 
 *              Human Factors & Applied Cognitive Psychology
 */

#ifndef __PACT_NODEHANDLER_HDR__
#define __PACT_NODEHANDLER_HDR__

#ifdef WIN32
	// disable - decorated name length exceeded
	#pragma warning(disable:4503)
	// disable 'identifier' truncation warning
	#pragma warning(disable:4786)
#endif


#include <stdexcept>
#include <qcolor.h>
#include "document.h"


// Qt classes
class QBoxLayout;
class QObject;
class QWidget;

// \todo
// \todo refactor
// \todo

// node handlers should be functors (pass by value) and processing of 
// child nodes should use for_each algoritum

//

namespace pact{
	const std::string CONFLICT_DETAILS_ACCEPTANCE_TIME		= "acceptanceTime";	
	const std::string CONFLICT_DETAILS_CONFLICT_TIME		= "conflictTime";
	const std::string CONFLICT_DETAILS_CONFLICT_AIRCRAFT	= "conflictAircraft";
	const std::string CONFLICT_DETAILS_TRIAL				= "trial";
	const std::string COORDINATION_REQUEST					= "coordinationRequest";
	const std::string COORDINATION_REQUEST_SHOW				= "show";
	const std::string FLASH_PARAM_FLASH_COLOUR				= "colour";
	const std::string FLASH_PARAM_FLASH_ITEM				= "flashItem";
	const std::string NODE_TYPE_ALTITUDE					= "altitude";
    const std::string NODE_TYPE_ALTITUDE_CHANGE_ENABLE_TIME = "altitudeChangeEnableTime";
	const std::string NODE_TYPE_VELOCITY					= "velocity";
	const std::string NODE_TYPE_FLIGHT_PATH					= "flightpath";
	const std::string NODE_TYPE_CLOSED_PATH					= "closedpath";
	const std::string NODE_TYPE_START_TIME					= "start";
	const std::string NODE_TYPE_AS_FLASH_PARAMS				= "acceptedStateFlashParams";
	const std::string NODE_TYPE_FLASH_COLOR					= "flashColor";
	const std::string NODE_TYPE_CONFLICT_DETAILS			= "conflictDetails";
	const std::string NODE_TYPE_REMINDER_BOX_FLASH_COLOR	= "flashColor";
	const std::string NODE_TYPE_REMINDER_BOX_FLASH_TIME		= "flashTime";
	const std::string NODE_TYPE_REMINDER_BOX_DISPLAY_TIME	= "displayTime";
    const std::string NODE_TYPE_REMINDER_BOX_DISMISS_BUTTON = "dismissButton";
	const std::string NODE_TYPE_QUESTION_BOX_ANSWER			= "answer";
	const std::string NODE_TYPE_QUESTION_BOX_INCORRECT_RESPONSE = "incorrectResponse";
	const std::string NODE_TYPE_DIVISION_LINE_DISPLAY_TIME	= "displayTime";
	const std::string NODE_TYPE_SOUND_FILE_PLAY_TIME		= "playTime";
	const std::string ATTRIBUTE_TYPE_DIVISION_LINE_ID		= "id";
    const std::string ATTRIBUTE_TYPE_DIVISION_LINE_X1		= "x1";
    const std::string ATTRIBUTE_TYPE_DIVISION_LINE_Y1		= "y1";
    const std::string ATTRIBUTE_TYPE_DIVISION_LINE_X2		= "x2";
    const std::string ATTRIBUTE_TYPE_DIVISION_LINE_Y2		= "y2";
    const std::string ATTRIBUTE_TYPE_DIVISION_LINE_COLOR	= "color";
    const std::string ATTRIBUTE_TYPE_DIVISION_LINE_WIDTH	= "width";

	/*!
	 * \struct pact::nodehandler_error
	 */
	struct nodehandler_error : public std::runtime_error{
		nodehandler_error(const std::string& msg) 
			:std::runtime_error(msg){}
	};


	/*!
	 * \struct pact::InstructionNodeHandler
	 */
	struct InstructionNodeHandler : xml::NodeHandler 
	{
		InstructionNodeHandler(
			const xml::Document* doc, 
			xml::DocumentView* view
		)
			:NodeHandler(doc, view)
		{}

		void operator()(const xml::DocumentNode*);
	};


	/*!
	 * \struct pact::QuestionNodeHandler
	 */
	struct QuestionNodeHandler : xml::NodeHandler 
	{
		QuestionNodeHandler(
			const xml::Document* doc, 
			xml::DocumentView* view
		)
			:NodeHandler(doc, view)
		{}

		void operator()(const xml::DocumentNode*);
	};

	/*!
	 * \struct pact::ParamNodeHandler
	 */
	struct ParamNodeHandler : xml::NodeHandler 
	{
		ParamNodeHandler(
			const xml::Document* doc, 
			xml::DocumentView* view
		)
			:NodeHandler(doc, view)
		{}

		void operator()(const xml::DocumentNode*);
	};

	/*!
	 * \struct pact::MapNodeHandler
	 */
	struct MapNodeHandler : xml::NodeHandler 
	{
		MapNodeHandler(
			const xml::Document* doc, 
			xml::DocumentView* view
		)
			:NodeHandler(doc, view)
		{}

		void operator()(const xml::DocumentNode*);
	};


	/*!
	 * \class pact::MapRouteNodeHandler
	 */
	class MapRouteNodeHandler : public xml::NodeHandler 
	{
	public:

		MapRouteNodeHandler(
			const xml::Document*, 
			xml::DocumentView*,
			const xml::DocumentNode*
		);
		~MapRouteNodeHandler();

		void operator()(const xml::DocumentNode*);

	private:

		std::string _routeID;

	};


	/*!
	 * \class pact::MapSectorNodeHandler
	 */
	class MapSectorNodeHandler : public xml::NodeHandler 
	{
	public:

		MapSectorNodeHandler(
			const xml::Document* doc, 
			xml::DocumentView* view,
			const xml::DocumentNode*
		);
		~MapSectorNodeHandler();

		void operator()(const xml::DocumentNode*);

	private:

		std::string _sectorID;

	};


	/*!
	 * \struct pact::SkyNodeHandler
	 */
	struct SkyNodeHandler : xml::NodeHandler 
	{
		SkyNodeHandler(
			const xml::Document* doc, 
			xml::DocumentView* view
		)
			:NodeHandler(doc, view)
		{}

		void operator()(const xml::DocumentNode*);
	};


	/*!
	 * \struct pact::SkyAircraftNodeHandler
	 */
	struct SkyAircraftNodeHandler : xml::NodeHandler 
	{
		SkyAircraftNodeHandler(
			const xml::Document* doc, 
			xml::DocumentView* view
		)
			:NodeHandler(doc, view)
		{}

		void operator()(const xml::DocumentNode*);
	};


	struct ReminderNodeHandler: xml::NodeHandler
	{
		ReminderNodeHandler(const xml::Document*	doc, 
							xml::DocumentView*		view,
							std::string				a_attachedToAircraft)
			: NodeHandler(doc, view),
				m_attachedToAircraft(a_attachedToAircraft)
		{
		}

		void operator()(const xml::DocumentNode*);

	private:
		std::string			m_attachedToAircraft;
		std::string			m_displayText;
		QColor				m_bgColor;
		unsigned int		m_width;
		unsigned int		m_height;
		double				m_posX;
		double				m_posY;
		std::vector<QColor>	m_flashColors;
	};

	struct SoundFileNodeHandler:xml::NodeHandler
	{
		SoundFileNodeHandler(	const std::string&		a_fileName,
								const xml::Document*	doc,
								xml::DocumentView*		view)
			:	NodeHandler(doc, view),
				m_fileName(a_fileName)
		{
		}

		void operator()(const xml::DocumentNode*);
		
	private:
		std::string m_fileName;
	};

	struct DivisionLineNodeHandler: xml::NodeHandler
	{
		DivisionLineNodeHandler(const std::string&		a_id,
								const xml::Document*	doc, 
								xml::DocumentView*		view)
			: NodeHandler(doc, view),
			  m_id(a_id)
		{
		}

		void operator()(const xml::DocumentNode*);

	private:
		std::string m_id;
	};

	struct QuestionBoxNodeHandler:xml::NodeHandler
	{
		QuestionBoxNodeHandler(const xml::Document* doc, 
								xml::DocumentView* view)
			: NodeHandler(doc, view)
		{
		}

		void operator()(const xml::DocumentNode*);

	private:
		std::string m_answer;
		std::string m_incorrectResponse;
	};

	/*!
	 * \struct pact::SkyAircraftFlightpathNodeHandler
	 */
	struct SkyAircraftFlightpathNodeHandler : xml::NodeHandler 
	{
		SkyAircraftFlightpathNodeHandler(
			const xml::Document* doc, 
			xml::DocumentView* view
		)
			:NodeHandler(doc, view)
		{}

		void operator()(const xml::DocumentNode*);
	};

	struct AircraftAcceptedStateFlashNodeHandler : xml::NodeHandler 
	{
		AircraftAcceptedStateFlashNodeHandler(
			const xml::Document* doc, 
			xml::DocumentView* view
		)
			:NodeHandler(doc, view)
		{}

		void operator()(const xml::DocumentNode*);
	};

	struct AircraftConflictDetailsNodeHandler : xml::NodeHandler
	{
		AircraftConflictDetailsNodeHandler (
			const xml::Document* doc, 
			xml::DocumentView* view)
			:NodeHandler(doc, view)
		{
		}

		void operator()(const xml::DocumentNode*);
	};

	struct ShowCoordinationRequestNodeHandler : xml::NodeHandler
	{
		ShowCoordinationRequestNodeHandler (
			const xml::Document* doc, 
			xml::DocumentView* view)
			:NodeHandler(doc, view)
		{
		}

		void operator()(const xml::DocumentNode*);
	};

	/*!
	 * Decode "area" node (eg weather or military)
	 */
	class AreaNodeHandler : public xml::NodeHandler 
	{
	public:

		AreaNodeHandler(
			const xml::Document* doc, 
			xml::DocumentView* view,
			const xml::DocumentNode*
		);
		~AreaNodeHandler();

		void operator()( const xml::DocumentNode* );

	private:

		std::string _areaID;

	};




	/*!
	 * \struct pact::UINodeHandler
	 */
	struct UINodeHandler : xml::NodeHandler 
	{
		UINodeHandler(
			const xml::Document* doc, 
			xml::DocumentView* view
		)
			:NodeHandler(doc, view)
		{}

		void operator()(const xml::DocumentNode*);
	};


	/*!
	 * \class pact::UIWidgetNodeHandler
	 */
	class UIWidgetNodeHandler : public xml::NodeHandler 
	{
	public:

		UIWidgetNodeHandler(
			const xml::Document*, 
			xml::DocumentView*,
			const std::string&,
			const std::string&,
			QWidget*
		);
		~UIWidgetNodeHandler();

		void operator()(const xml::DocumentNode*);

	private:

		void create_widget(const std::string&, const std::string&, QWidget*);
		void add2layout(QWidget*);
		void set_property(const xml::DocumentNode*);

	private:

		QWidget* _widget;

	};


	/*!
	 * \class pact::UIWidgetLayoutNodeHandler
	 */
	class UIWidgetLayoutNodeHandler : public xml::NodeHandler
	{
	public:

		UIWidgetLayoutNodeHandler(
			const xml::Document*,
			xml::DocumentView*,
			const xml::DocumentNode*,
			QWidget*
		);
		~UIWidgetLayoutNodeHandler();

		void operator()(const xml::DocumentNode*);

	private:

		void create_layout(const std::string&, int, QWidget*);

	private:

		QBoxLayout* _layout;
		QWidget* _widget;

	};

	class UIQObjectNodeHandler : public xml::NodeHandler
	{
	public:
		UIQObjectNodeHandler(const xml::Document*,
								xml::DocumentView*,
								std::string type);

		~UIQObjectNodeHandler();

		void operator()(const xml::DocumentNode*);

	private:
		QObject* _object;
		std::string _type;
	};

	/*!
	 * \class pact::UIConnectionNodeHandler
	 */
	class UIConnectionNodeHandler : public xml::NodeHandler 
	{
	public:

		UIConnectionNodeHandler(
			const xml::Document* doc, 
			xml::DocumentView* view
		)
			:NodeHandler(doc, view)
			,_tx(0), _sig("")
			,_rx(0), _slot("")
		{}

		void operator()(const xml::DocumentNode*);

	private:

		QWidget* widget_ptr(const std::string&)const;
		void connect()const;

	private:

		QObject* _tx;
		std::string _sig;
		QObject* _rx;
		std::string _slot;

	};


};

#endif
